using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;
using TUtils.Common;
using TUtils.Common.Extensions;
using TUtils.Common.CommandLine;
using TUtils.Common.CommandLine.Common;

namespace Resx2Js
{
	class Program
	{
		static void Main(string[] args)
		{
			string resourceFilePath;
			string namespaceJs;
			TranspilerEnum transpiler;
			if (!ParseArgs(args, out resourceFilePath, out namespaceJs, out transpiler))
				return;

			if (!File.Exists(resourceFilePath))
			{
				Console.WriteLine($"file path {resourceFilePath} doesn't exist !");
				return;
			}

			try
			{
				var dirPath = Path.GetDirectoryName(resourceFilePath);
				var resourceName = Path.GetFileNameWithoutExtension(resourceFilePath);

				var allRessourcePaths = TFilePath.FindFilesInFolder(dirPath, filePath =>
				{
					var fp = new TFilePath(filePath);
					return ( fp.FileExtension2?.ToLower() == "resx"
					         || fp.FileExtension1?.ToLower() == "resx")
						   && (fp.FileBaseName?.EqualsIgnoreCase(resourceName)??false);
				});

				XPathNodeIterator datas = null;

				foreach (var resourcePath in allRessourcePaths)
				{
					var xml = File.ReadAllText(resourcePath);
					var fp = new TFilePath(resourcePath);
					var langIsoCode = fp.FileExtension2.IsNullOrEmpty() ? "default" : fp.FileExtension1;
					var doc = new XmlDocument();
					doc.LoadXml(xml);
					var nav = doc.CreateNavigator();
					datas = nav.Select("//data");
					string text = string.Empty;

					switch (transpiler)
					{
						case TranspilerEnum.Saltarelle:
						case TranspilerEnum.BridgeNet:
							text = string.Format(@"
(function() {{
	'use strict';
	global.{2} = global.{2} || {{ }};
	global.{2}.Strings = global.{2}.Strings || function () {{ }};
	////////////////////////////////////////////////////////////////////////////////
	// {2}.Strings
	var ${2}_Strings = function() {{
	}};
	global.{2}.Strings[""{1}""] = ${2}_Strings;
	(function() {{{0}
	}})();
}})();",
								GetTranslations(datas, namespaceJs, transpiler),
								langIsoCode,
								namespaceJs);
							break;
						case TranspilerEnum.TypeScript:
							text = string.Format(@"
/// <reference path=""{3}.d.ts"" />
/* automatically generated by https://github.com/Tommmi/Resx2Js */
namespace {2}
{{
	export class Resource_{1} implements I{2} {{
{0}
	}}

	export var texts: I{2} = new Resource_{1}();
}}
",
								GetTranslations(datas, resourceName, transpiler),
								langIsoCode,
								resourceName,
								resourceName.ToLower()
								);
							break;
						default:
							throw new ArgumentOutOfRangeException();
					}

					var outPath = new TFilePath(resourcePath);
					var fileExtension = transpiler == TranspilerEnum.TypeScript ? "ts" : "js";
					if (fp.FileExtension2.IsNullOrEmpty())
						outPath.FileExtension1 = fileExtension;
					else
						outPath.FileExtension2 = fileExtension;

					using (var file = File.CreateText(outPath.ToString().ToLower(CultureInfo.InvariantCulture)))
					{
						file.Write(text);
					}
				}

				if (transpiler == TranspilerEnum.TypeScript)
				{
					var typeDefinitionFileText = string.Format(@"
/*******************************************************************************
 * automatically generated by Resx2Js.exe
 *******************************************************************************/
interface I{1} {{
{0}
}}

declare namespace {1}
{{
		export var texts: I{1};
}}",
						GetResourceKeyDefinitions(datas, transpiler),
						resourceName
					);
					var typeDefinitionFilePath = new TFilePath(dirPath.Combine(resourceName));
					typeDefinitionFilePath.FileExtension1 = "d";
					typeDefinitionFilePath.FileExtension2 = "ts";
					using (var file = File.CreateText(typeDefinitionFilePath.ToString()))
					{
						file.Write(typeDefinitionFileText);
					}
				}
				else
				{
					var csharpFileText = string.Format(@"
/*******************************************************************************
 * automatically generated by Resx2Js.exe
 *******************************************************************************/
{4}

namespace {1}
{{
	public class {2}
	{{
		#region private

		[{3}(""typeof global.{1}.Strings[{{isoCode}}]!= \""undefined\"""")]
		private static bool ExistLanguage(string isoCode)
		{{
			return false;
		}}

		[{3}(""global.{1}.Strings[{{isoCode}}][{{key}}]"")]
		private static string GetStringInternal(string isoCode, string key)
		{{
			return null;
		}}

		private static string GetString(string key)
		{{
			if (ExistLanguage(CurrentLanguageIsoCode))
			{{
				var text = GetStringInternal(CurrentLanguageIsoCode, key);
				if (text != null)
					return text;
			}}

			var txt = GetStringInternal(""default"", key);
			return txt;
		}}

		#endregion

		#region public

		/// <summary>
		/// Sets the current language as ISO code
		/// e.g.: ""de"", ""en"", """"(default)
		/// </summary>
		public static string CurrentLanguageIsoCode {{ get; set; }}

		#region Keys

		{0}

		#endregion

		#endregion
	}}
}}",
						GetResourceKeyDefinitions(datas, transpiler),
						namespaceJs,
						resourceName,
						transpiler == TranspilerEnum.Saltarelle ? "InlineCode" : "Template",
						transpiler == TranspilerEnum.Saltarelle ? "using System.Runtime.CompilerServices;" : "using Bridge;");


					var csharpOutFilePath = new TFilePath(dirPath.Combine(resourceName));
					csharpOutFilePath.FileExtension1 = "cs";
					using (var file = File.CreateText(csharpOutFilePath.ToString()))
					{
						file.Write(csharpFileText);
					}
				}
			}
			catch (Exception e)
			{
				Console.WriteLine(e.DumpException());
			}
		}

		private static object GetResourceKeyDefinitions(XPathNodeIterator datas, TranspilerEnum transpilerEnum)
		{
			var text = new StringBuilder();
			text.AppendLine();
			foreach (XPathNavigator dataNode in datas)
			{
				var name = dataNode.GetAttribute("name", "");
				if (transpilerEnum == TranspilerEnum.TypeScript)
				{
					text.AppendLine($"		{name}: string;");
				}
				else
				{
					text.AppendLine($"		public static string {name} {{ get {{ return GetString(\"{name.ToLower()}\"); }} }}");
				}
			}
			return text.ToString();
		}

		private static string GetTranslations(XPathNodeIterator datas, string namespaceJs, TranspilerEnum transpilerEnum)
		{
			var text = new StringBuilder();
			text.AppendLine();
			foreach (XPathNavigator dataNode in datas)
			{
				var name = dataNode.GetAttribute("name", "");
				var selectSingleNode = dataNode.SelectSingleNode("value");
				if (selectSingleNode != null)
				{
					var value = selectSingleNode.Value;
					switch (transpilerEnum)
					{
						case TranspilerEnum.Saltarelle:
						case TranspilerEnum.BridgeNet:
							text.AppendLine($"    ${namespaceJs}_Strings.{name.ToLower()} = \"{value}\";");
							break;
						case TranspilerEnum.TypeScript:
							text.AppendLine($"        {name}: string = \"{value}\";");
							break;
						default:
							throw new ArgumentOutOfRangeException(nameof(transpilerEnum), transpilerEnum, null);
					}
				}
			}
			return text.ToString();
		}

		private static bool ParseArgs(string[] args, out string resourceFilePath, out string namespaceJs, out TranspilerEnum transpiler)
		{
			var resxFilePathArgDef = new CommandLineArgDefinition().Init(() => new CommandArgString(), "resxFilePath");
			var namespaceJsArgDef = new CommandLineArgDefinition().Init(() => new CommandArgString(), "namespaceJs");
			var transpilerNameArgDef = new CommandLineArgDefinition().Init(() => new CommandArgString(), "transpiler");

			CommandLineArgs commandLineArgs;
			CommandLineParseResult commandLineResult;
			if (!CommandLineArgs.TryCreate(
				args,
				out commandLineArgs,
				out commandLineResult,
				resxFilePathArgDef, 
				namespaceJsArgDef,
				transpilerNameArgDef))
			{
				Console.WriteLine(commandLineArgs.UsageHint);
				resourceFilePath = null;
				namespaceJs = null;
				transpiler = TranspilerEnum.Saltarelle;
				return false;
			}

			resourceFilePath = commandLineArgs[resxFilePathArgDef].Value as string;
			namespaceJs = commandLineArgs[namespaceJsArgDef].Value as string;
			var transpilerTxt = commandLineArgs[transpilerNameArgDef].Value as string;
			transpiler = transpilerTxt.AsEnum(TranspilerEnum.Saltarelle);

			return true;
		}
	}
}
